import os
import json
from flask import Flask, request
from aiogram import Bot, Dispatcher, types
from aiogram.utils.executor import start_webhook

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –¥–µ–ø–ª–æ—è)
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö
with open('warehouses.json', 'r', encoding='utf-8') as f:
    warehouses = json.load(f)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–∫–ª–∞–¥–æ–≤
warehouse_names = sorted(set(warehouse["name"] for warehouse in warehouses))

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
app = Flask(__name__)

# URL –¥–ª—è webhook
WEBHOOK_URL = f'https://{os.getenv("bg-official-bot.onrender.com")}/{BOT_TOKEN}'

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
async def handle_webhook():
    json_str = await request.get_data(as_text=True)
    update = types.Update(**json.loads(json_str))
    await dp.process_update(update)
    return "OK"


@app.route("/")
def index():
    return "Bot is running!"


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìç –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤"
@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üìç –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"]
    keyboard.add(*buttons)
    await message.answer(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ë–∏ –î–∂–∏¬ª!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìç –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤"
@dp.message_handler(lambda message: message.text == "üìç –°–ø–∏—Å–æ–∫ —Å–∫–ª–∞–¥–æ–≤")
async def list_warehouses(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for warehouse_name in warehouse_names:
        keyboard.add(warehouse_name)
    keyboard.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∫–ª–∞–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
@dp.message_handler(lambda message: message.text in warehouse_names)
async def display_warehouse_info(message: types.Message):
    selected_warehouse_name = message.text
    matching_warehouses = [w for w in warehouses if w["name"].lower() == selected_warehouse_name.lower()]

    if matching_warehouses:
        for warehouse in matching_warehouses:
            response = f"**–°–∫–ª–∞–¥ {warehouse['name']}:**\n"
            response += f"**–ê–¥—Ä–µ—Å:** {warehouse.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            response += f"**–¢–µ–ª–µ—Ñ–æ–Ω:** {warehouse.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ù–∞–≤–∏–≥–∞—Ç–æ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            lat = warehouse['latitude']
            lon = warehouse['longitude']
            
            # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö
            route_url = f"https://yandex.ru/maps/?rtext=~{lat},{lon}"
            response += f"**–ú–∞—Ä—à—Ä—É—Ç:** [–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç]({route_url})\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

            await message.answer(response, parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∫–ª–∞–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: types.Message):
    await start_handler(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message_handler(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    await message.answer(
        '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:\n'
        '–¢–µ–ª–µ—Ñ–æ–Ω: 8 800 222 24 12\n'
        'Email: info@bglogistic.ru\n'
        '[WhatsApp](https://wa.me/78002222412) | [Telegram](https://t.me/BGLogisticSupport)',
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏"
@dp.message_handler(lambda message: message.text == "‚ÑπÔ∏è –û –∫–æ–º–ø–∞–Ω–∏–∏")
async def about_company(message: types.Message):
    await message.answer(
        '–ö–æ–º–ø–∞–Ω–∏—è ¬´–ë–∏ –î–∂–∏¬ª ‚Äî –º—ã —Ö—Ä–∞–Ω–∏–º –¥–æ–≤–µ—Ä–∏–µ!\n'
        '–£ –Ω–∞—Å ‚Äî —Å–µ—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–æ–≤ –∫–ª–∞—Å—Å–∞ A –∏ B –≤ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö —Å—Ç—Ä–∞–Ω—ã.\n'
        '–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ: https://bg-logistic.ru/'
    )


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
async def on_start():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    await bot.set_webhook(WEBHOOK_URL)


if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=f'/{BOT_TOKEN}',
        on_startup=on_startup,
        host='0.0.0.0',
        port=10000
    )
